plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
}

String build = ""
if (System.getenv("BUILD_NUMBER") != null) {
    build = "b" + System.getenv("BUILD_NUMBER")
}
if (build == null || build == '') {
    version = "${project.minecraft_version}-${project.mod_version}"
} else {
    version = "${project.minecraft_version}-${project.mod_version}-" + build
}

group = mod_group_id

repositories {
    maven {
        name "Nucleus"
        url 'https://maven.pkg.github.com/pauljoda/Nucleus'
        credentials {
            // Must create files in the same directory with this info, one per file. DO NOT UPLOAD
            username new File("USERNAME").text
            password new File("ACCESS_TOKEN").text
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven { url 'https://modmaven.dev/' }
    mavenLocal()
}

base {
    archivesName = mod_id
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {

        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

//minecraft {
//    accessTransformers {
//        file('src/main/resources/META-INF/accesstransformer.cfg')
//    }
//}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "com.pauljoda:nucleus:+"

//    // For testing with power
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools

    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}